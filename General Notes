## Re-factoring Architecture


### Delegate Architecture

#### Problems in the current architecture:
  - Unused methods in UIDelegate - `onPress()`, etc., methods are never overriden in the delegates
  - Mixed render and draw
  - Colors and sizes are hardcoded in the SourceDisc package



- *Drawing and rendering is implemented in glyph classes implementing Glyph protocol*
- *ControlPad.UIDelegate does not implement input methods (onPress(), ...)?*
  - *(Animations are triggered directly from ControlPad class?)*




Names:
`SourcePad` calls methods to `SourcePadGlyph`, which calls its `GlyphDelegate` render() and draw() methods

`SourcePad` calls methods to `SourcePadGlyph`, which calls its `GlyphRenderer` render() and draw() methods


### Model Architecture
- Should there be a link to the model from the SourceDisc class?

- Scene class is extracted from the Device class
- Sources are not sorted in the model class, instead they are regenerated in the right
  order from the RimPad on every add/remove
- Detach serializer from Model?



### History Architecture
Who is going to add/remove sources:
  - History
  - AI helper?
  - Copy/Paste functionality
  - Interrim pad exchange functionality

- Devise a way for the whole scene replacement to be saved as Event


TODO: Optimize memory leaks of object references in Event class

### Classes to add:

DiscManager


protocol DiscManagerDelegate {

    func redraw()
    func onNew(sourceDisc: SourceDisc)
    func onHapticFeedback()

  }
